{
     "text" : "<div><div class='alert alert-warning'><h3>promise</h3><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理。上代码</p><pre><code>var promise=new promise(resolve,reject){resolve(value)}else{reject(error)}};</code><code>promise.then(function(value){</code></pre></div><div class='alert alert-warning'><h3>resolve&reject</h3><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是<strong>两个函数</strong>，由JavaScript引擎提供</p><pre><code>let setTime=function(sm){return promise=new Promise(function(resolve,reject){setTimeout(resolve,sm,'done')})};setTime(2000).then(function(value){console.log(value)});</code></pre></div><div class='alert alert-warning'><h3>es6-promise for ajax request</h3><pre><code>let url1='https://reqres.in/api/users?page=2';let url404='https://reqres.in/api/users/23';let getMessage=function(url){return new Promise(function(resolve,reject){let xhr=new XMLHttpRequest();xhr.open('GET',url);xhr.responseType='json';xhr.setRequestHeader('Accept','application/json');xhr.onreadystatechange=handler;xhr.send();function handler(){if(this.readyState!==4){return};if(this.status===200){resolve(this.response)}else{reject(new Error(this.status))}}})};getMessage(url1).then(function(value){console.log(value)},function(error){console.log(error)})</code></pre></div><div class='alert alert-warning'><h3>Promise.all()</h3><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p><kbd>var p=Promise.all([p1,p2,p3]);</kbd>实例：<pre><code>var promises=[2,3,4,5,7,9].map(function(id){return getJson('/post/'+id+'.json')})Promises.all(promises).then(function(resolve){resolve message},function(rejectMs){</code></pre></div></div>" 
}