{
    "page":1,
    "per_page":3,
    "total":12,
    "total_pages":4,
    "data":
    [
        {
            "id":1,
            "title":"Git",
            "subtitle": "this is about Git introduction...",
            "avatar":"./assets/img/git_img.png",
            "introduction": "this is about Git introduction...",
            "text": "<div class='alert alert-warning'><p>获取远程分支</p><kbd>$ git checkout-b local-name origin/remote-name</kbd></br><kbd>$ git fetch origin master:page-one</kbd></div><div class='alert alert-warning'><p>查看本地用户名和邮箱</p><kbd>$ git config user.name</br>$ git config user.email</kbd></div><div class='alert alert-success'><p>修改URL地址：（修改前请查看远程地址：$git remote-v）</p><kbd>$ git remote set-url origin http://github.com/...</kbd></div><div class='alert alert-success'><p>GIT commit guides:</p><kbd>Update.../Add.../Fixed...Merge.../Left issue.../</br>feat:增加新功能；</br>fix:修复错误；</br>docs:修改文档；</br>style:修改样式；</br>refactor:代码重构；</br>test:增加测试模块，不涉及生产环境的代码；</br>chore:更新核心模块，包配置文件，不涉及生产环境的代码；</br></kbd></div><div class='alert alert-danger'><p>删除本地分支</p><kbd>$ git branch-d<branch-name></kbd></div><div class='alert alert-danger'><p>强行删除本地分支（如果没有完全合并）</p><kbd>$ git branch-D<branch-name></kbd></div><div class='alert alert-danger'><p>删除远程分支</p><kbd>$ git push origin--delete<branch-name></kbd></div>",
            "link": null
        },
        {
            "id":2,
            "title":"Angular2",
            "subtitle": "this is about Angular2...",
            "avatar":"./assets/img/angular2_img.png",
            "introduction": "Angular 2是一个伟大的新框架，在构建我们的应用程序时为我们提供了极大的灵活性和强大的功能。在本站当中，你可能觉得除了起步介绍外，其他知识十分琐碎，但是使用当中它们是相互依赖的，列表当中是方便相关知识的查阅，特别是哪里有报错可以方便切入知识来进一步解决。",
            "text": "<img class='img-fluid ng-banner'src='./../../../assets/img/overview2.png'alt='angular2'><p class='h3'>Angular2 fram structure.</p><p>基本的构架关系明确，上下层级依赖。做结构的应用程序，以便您可以快速找到代码，识别代码一目了然，保持Flattest结构，你可以尝试干。确定结构要遵循这四个基本指导原则，按重要性排列。</p><div class='row'><div class='col-sm-7'><img src='./../../../assets/img/angular2-structure.png' class='img-fluid'><p>运用router-outlet进行布局。</p><img src='./../../../assets/img/router-outlet.png' class='img-fluid'></div><div class='col-sm-5'><div class='card'><div class='card-block'><p>|-config</br>|-mocks</br>&nbsp;&nbsp;|-article</br>&nbsp;&nbsp;&nbsp;&nbsp;|-article.response.json</br>&nbsp;&nbsp;|-manage</br>&nbsp;&nbsp;&nbsp;&nbsp;|-admin.response.json</br>&nbsp;&nbsp;&nbsp;&nbsp;|-user.response.json</br>|-node_modules</br>|-src</br>&nbsp;&nbsp;|-app</br>&nbsp;&nbsp;&nbsp;&nbsp;|-pages</br>&nbsp;&nbsp;&nbsp;&nbsp;|-theme</br>&nbsp;&nbsp;&nbsp;&nbsp;|-app.component.ts</br>&nbsp;&nbsp;&nbsp;&nbsp;|-app.module.ts</br>&nbsp;&nbsp;&nbsp;&nbsp;|-app.routing.ts</br>&nbsp;&nbsp;&nbsp;&nbsp;|-app.scss</br>&nbsp;&nbsp;&nbsp;&nbsp;|-app.service.ts</br>&nbsp;&nbsp;|-assets</br>&nbsp;&nbsp;|-environments</br>&nbsp;&nbsp;|-index.html</br>&nbsp;&nbsp;|-main.ts</br>&nbsp;&nbsp;|-main.browser.ts</br>|-.gitignore</br>|-angular-cli.json</br>|-package.json</br>|-README.md</br>|-tsconfig.json  //ts配置</br>|-tsconfig.webpack.json</br>|-tslint.json&nbsp;&nbsp;&nbsp;&nbsp;//用于检测ts的规范、错误</br>|-typedoc.json&nbsp;&nbsp;&nbsp;&nbsp;//ts文档生成器</br>|-webpack.config.js.</p></div></div></div></div><div class='row ng-article'><div class='col-sm-6'><img class='img-fluid'src='./../../../assets/img/speed1.svg'alt=''></div><div class='col-sm-6'><h3 class='intr_t'>开发跨平台应用</h3><p>学习通过Angular来构建应用程序，并重复利用你的代码和能力来构建可在任何平台上部署的应用。这些平台可以是PC站点、移动站点、PC本地应用和移动本地应用等。</p></div></div><div class='row'><div class='col-sm-6'><h3 class='intr_t'>速度与性能</h3><p>实现当前Web平台最大可能的速度，并更近一步提升，通过Web Worker和服务端渲染技术。Angular让你在扩展性上可以控制。比如说，通过RxJS、Immutable.js或者其他推模式建立数据模型来满足大数据需求。</p></div><div class='col-sm-6'><img class='img-fluid'src='./../../../assets/img/speed2.svg'alt=''></div></div><div class='row'><div class='col-sm-6'><img class='img-fluid'src='./../../../assets/img/speed3.png'alt=''></div><div class='col-sm-6'><h3 class='intr_t'>难以置信的工具</h3><p>通过简单的声明模板快速构建特性。通过你自己的组件和利用大量现有组件，扩展模板语言。在几乎所有的IDE和编辑器里可以立即获得针对Angular的帮助和提示。当这一切在一起，你可以将注意力集中在如何打造你惊艳的App上面，而不是尝试如何使代码工作。</p></div></div><div class='row'><div class='col-sm-6'><h3 class='intr_t'>众多粉丝的喜爱</h3><p>从原型开始到最后的全球上线部署，Angular提供了富有生产力和可扩展性的基础设施来支持Google大量的应用。</p></div><div class='col-sm-6'><img class='img-fluid'src='./../../../assets/img/speed4.png'alt=''></div></div><div class='content'><p class='h3'>How to start:</p><p class='h5'>*Pages1</p><p class='pages1'>如何构建一个Angular 2应用程序,一下有两种方法可以选择。</br>一、创建一个Angular 2初学者工具包，使用Angular CLI：</br>你完全可以跳过安装程序，只抓取你需要的文件。跳转到'退后一步'，直接进入Angular 2特定部分。</br>你可以像这样获得一个Angular应用程序：</br><kbd>$npm install-g angular-cli</kbd></br></br><kbd>$ng new my-new-app</kbd></br></br><kbd>$cd my-new-app</kbd></br></br><kbd>$ng serve</kbd></br>然后打开你的浏览器：<a href='javascript:void(0);'>http://localhost:4200</a></br>二、直接获取angular2相关起步kit代码：</br>clone URL：git clone https:</p><div class='pages2'><p class='h5'>*Pages2</p><p>我们起初步骤是：</br>1、创建我们的基本项目。</br>2、建立TypeScript全局。</br>3、下载依赖包并且设置System.js。</br>4、开始搭建我们的angler2项目。</br>基本结构构架如下：</br></p><div class='card'><div class='card-block'>|-app/</br>|-app.component.ts|-app.module.ts|-main.ts|-index.html</br>|-package.json</br>|-tsconfig.json</br>|-typings.json</br>|-systemjs.config.json</div></div><p><mark>注意：这里我们使用已经配置好的库，所以省略了一下多个步骤：</mark></br>创建html文本：$touch index.html</br></br>初始化项目：$npm init—yes</br></br>下载依赖服务：$npm install—save-dev lite-sarver</br>$npm install--save-dev typescript @types/node @types/jasmine @types/core-js</br></br>添加启动指令Package.json:</br>++<kbd>'script':{</kbd></br><kbd>&nbsp;&nbsp;'lite':'lite-server',</kbd></br><kbd>&nbsp;&nbsp;'start':'tsc && concurrently \\'npm run tsc:w\\' \\'npm run lite\\'',</kbd></br><kbd>}</kbd></br></br>配置tsconfig.json:</br><kbd>++'lib':['es2015','dom']</kbd></br><span class='badge badge-pill badge-success'>Tips</span>….详细起步配置可以参考：<a href='https://github.com/mangguoaidami/angular2-starter-http'>angular2-starter-http</a></br></p></div><div class='pages3'><p class='h3'>启动本地服务</p><p><kbd>$npm start</kbd>，下面就可以开始我们的项目搭建了。值得注意的是这里使用的是typescript和es6，具体有什么变化呢？</p><div class='card'style='backgroundColor: #292b2c; color: #ffffff;'><div class='card-block'><p>// typescript</br>class Greeter{}</br></br>// javascript</br>var Greeter=(function(){</br>function Greeter(){}</br>return Greeter;</br>}());</br></br>//es6</br>const message='hello';</br></br>//javascript</br>var message='hello';</br></br>// typescript</br>function saySomething(message='default message'){}</br></br>// javascript</br>function saySomething(message){</br>if(message===void 0){message='default message'}</br>}</br></br>//es6</br>const username='chris';</br>const message=`Say hello to ${username}`;</br></br>//javascript</br>var username='chris';</br>var message='Say hello to '+username;</br></p></div></div></div></div>",
            "link": "/pages/articleangular"
        },
        {
            "id":3,
            "title":"Rxjs",
            "subtitle": "this is about Rxjs introduction...",
            "avatar":"./assets/img/rxjs.png",
            "introduction": "this is about Rxjs introduction...",
            "text": "dsadada",
            "link": "/pages/articlerxjs"
        },
        {
            "id":4,
            "title":"Bootstrap",
            "subtitle":"this is about Bootstrap introduction...",
            "avatar":"./assets/img/bootstrap.png",
            "introduction": "<p class='text-center'>this is about Bootstrap introduction...</p>",
            "text": "<h3>bootstrap@4.0.0-beta:<a href='http://getbootstrap.com/' target='blank'>document</a></h3><p>Install Bootstrap in your Node powered apps with the npm package:</p><kbd>npm install bootstrap@4.0.0-beta</kbd></br></br></br><h3>bootstrap -v 4.0.0.alpha6:<a href='http://v4-alpha.getbootstrap.com/' target='blank'>document</a></h3><p>Install Bootstrap in your Node powered apps with the npm package:</p><kbd>npm install bootstrap@4.0.0-alpha.6</kbd>",
            "link": null
        },
        {
            "id":5,
            "title":"Angular2-baidu-map API",
            "subtitle": "this is Angular2-baidu-map API",
            "avatar":"./assets/img/icon-bg.jpg",
            "introduction": "<p class='text-center'>Get the details code in <a href='https://github.com/mangguoaidami/angular2-baidu-map'>GitHub</a></p>",
            "text": "<div class='map container'><div class='alert alert-success'><h4>API<span class='badge badge-default'>参考</span></h4><a href='##'>mangguoaidami-github</a><h3>attributes</h3><table class='table table-bordered table-hover'><thead><tr><th>Param</th><th>Type</th><th>Details</th></tr></thead><tbody><tr><td>ak</td><td><span>string</span></td><td>百度开发者应用的ak <a href='http://lbsyun.baidu.com/apiconsole/key' target='_blank'>Baidu Developer</a></td></tr><tr><td>protocol</td><td><span>string</span></td><td>协议，你想指定如何加载百度地图。 可选择： <kbd>http:</kbd><kbd>https:</kbd></td></tr><tr><td>options</td><td><span>MapOptions</span></td><td>用于绘制地图的选项</td></tr><tr><td>offline</td><td><span>OfflineOptions</span></td><td>在无网络可用时应用的选项</td></tr><tr><td>onMapLoaded</td><td><span>Expression</span></td><td>表达式在回调时进行评估，（Event对象可用作map实例）</td></tr><tr><td>onMarkerClicked</td><td><span>Expression</span></td><td>Expression在回调时进行评估，（Event对象可用作标记实例）</td></tr><tr><td>onClicked</td><td><span>Expression</span></td><td>表达式来评估回调，（事件对象是地图点击的事件实例）</td></tr></tbody></table></div><div class='section'><h3>MapOptions</h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>center</td><td><span>Object</span></td><td>Yes</td><td>地理坐标点</td><td><pre><kbd>{longitude121.506191,latitude:31.245554</kbd></pre></td></tr><tr><td>zoom</td><td><span>Number</span></td><td>No</td><td>缩放级别将显示在地图上。 默认为1 <kbd>10</kbd></td><td><pre><kbd><span>15</span></kbd></pre></td></tr><tr><td>navCtrl</td><td><span>NavigationControlOptions || Boolean</span></td><td>No</td><td>将一个NavigationControl添加到地图。 默认为 <kbd>true</kbd></td><td><pre><kbd><span>false</span></kbd></pre></td></tr><tr><td>scaleCtrl</td><td><span>ScaleControlOptions || Boolean</span></td><td>No</td><td>添加ScaleControl到地图。 默认为 <kbd>true</kbd></td><td><pre><kbd><span>false</span></kbd></pre></td></tr><tr><td>overviewCtrl</td><td><span>OverviewMapControlOptions || Boolean</span></td><td>No</td><td>向地图添加一个OverviewMapControl。 默认为true <kbd>true</kbd></td><td><pre><kbd><span>false</span></kbd></pre></td></tr><tr><td>enableScrollWheelZoom</td><td><span>Boolean</span></td><td>No</td><td>是否将ScrollWheelZoom启用到地图。 默认为 <kbd>true</kbd></td><td><pre><kbd><span>false</span></kbd></pre></td></tr><tr><td>geolocationCtrl</td><td><span>GeolocationControlOptions || Boolean</span></td><td>No</td><td>将地理位置控件添加到地图</td><td></td></tr><tr><td>markers</td><td><span>Marker[]</span></td><td>No</td><td>标记将显示在地图上。 默认为空 <kbd>empty</kbd></td><td></td></tr></tbody></table></div><div class='section'><h3>Marker</h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>longitude</td><td><span>Number</span></td><td>Yes</td><td>地理坐标的经度</td><td><pre><kbd><span>121.506191</span></kbd></pre></td></tr><tr><td>latitude</td><td><span>Number</span></td><td>Yes</td><td>地理坐标的纬度</td><td><pre><kbd><span>31.245554</span></kbd></pre></td></tr><tr><td>icon</td><td><span>String</span></td><td>No</td><td>自定义ICON的URL</td><td><pre><kbd>http<span>:</span><span>/</span><span>/</span>xxx<span>/</span>url<span>.</span>png</kbd></pre></td></tr><tr><td>width</td><td><span>Number</span></td><td>No</td><td>marker宽度</td><td><pre><kbd><span>100</span></kbd></pre></td></tr><tr><td>height</td><td><span>Number</span></td><td>No</td><td>高度marker</td><td><pre><kbd><span>100</span></kbd></pre></td></tr><tr><td>title</td><td><span>String</span></td><td>No</td><td>BMap.InfoWindow的标题，将通过点击标记显示</td><td><pre><kbd>Where</kbd></pre></td></tr><tr><td>content</td><td><span>String</span></td><td>No</td><td>BMap.InfoWindow的内容，将通过点击标记显示</td><td><pre><kbd>Put description here</kbd></pre></td></tr><tr><td>enableMessage</td><td><span>Boolean</span></td><td>No</td><td>是否在BMap.InfoWindow中启用SMS</td><td><pre><kbd><span>true</span></kbd></pre></td></tr><tr><td>autoDisplayInfoWindow</td><td><span>Boolean</span></td><td>No</td><td>是否显示BMap.InfoWindow以及Marker</td><td><pre><kbd><span>true</span></kbd></pre></td></tr><tr><td>enableDragging</td><td><span>Boolean</span></td><td>No</td><td>是否为标记启用可拖动功能</td><td><pre><kbd><span>true</span></kbd></pre></td></tr></tbody></table></div><div class='section'><h3>OfflineOptions<span>离线选项</span></h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>retryInterval</td><td><span class='number-type'>Number</span></td><td>No</td><td>i如果网络可用，则用于重试的间隔。 默认为30000ms</td><td><pre><kbd><span>5000</span></kbd></pre></td></tr><tr><td>txt</td><td><span class='string-type'>String</span></td><td>No</td><td>在无网络可用的情况下显示的文本。 默认为“离线”</td><td><pre><kbd>NO<span class='token operator'>-</span>NETWORK</kbd></pre></td></tr></tbody></table></div><div class='section'><h3>GeolocationControlOptions<span class='subtitle'>地理位置控制选项</span></h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>anchor</td><td><span class='enum-type'>ControlAnchor</span></td><td>No</td><td>在哪里放置GeoLocaltionControl</td><td><pre><kbd>ControlAnchor<span>.</span>BMAP_ANCHOR_TOP_LEFT</kbd></pre></td></tr><tr><td>offset</td><td><span class='object-type'>Size</span></td><td>No</td><td>GeoLocaltionControl的水平偏移</td><td><pre><kbd><span>{</span> width<span>:</span> <span>100</span><span>,</span> height<span>:</span> <span>100</span><span>}</span></kbd></pre></td></tr><tr><td>showAddressBar</td><td><span class='boolean-type'>Boolean</span></td><td>No</td><td>是否显示控制面板</td><td><pre><kbd><span class='token boolean'>true</span></kbd></pre></td></tr><tr><td>enableAutoLocation</td><td><span class='boolean-type'>Boolean</span></td><td>No</td><td>是否定位添加地图</td><td><pre><kbd><span class='token boolean'>true</span></kbd></pre></td></tr><tr><td>locationIcon</td><td><span class='object-type'>Icon</span></td><td>No</td><td>自定义图标</td><td><pre><kbd><span>{</span> url<span>:</span> <span class='token string'>'http://wwww/xx.png'</span><span>,</span> size<span>:</span> <span>{</span> width<span>:</span> <span>50</span><span>,</span> height<span>:</span> <span>50</span><span>}</span> <span>}</span></kbd></pre></td></tr></tbody></table></div><div class='section'><h3>NavigationControlOptions<span>导航控制选项</span></h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>anchor</td><td><span class='enum-type'>ControlAnchor</span></td><td>No</td><td>在哪里放置NavigationControl</td><td><pre><kbd>ControlAnchor<span>.</span>BMAP_ANCHOR_TOP_LEFT</kbd></pre></td></tr><tr><td>offset</td><td><span class='object-type'>Size</span></td><td>No</td><td>NavigationControl的水平偏移</td><td><pre><kbd><span>{</span> width<span>:</span> <span>100</span><span>,</span> height<span>:</span> <span>100</span><span>}</span></kbd></pre></td></tr><tr><td>type</td><td><span class='enum-type'>NavigationControlType</span></td><td>No</td><td>指定显示的NavigationControl的类型</td><td><pre><kbd>NavigationControlType<span>.</span>BMAP_NAVIGATION_CONTROL_SMALL</kbd></pre></td></tr><tr><td>showZoomInfo</td><td><span class='boolean-type'>Boolean</span></td><td>No</td><td>是否显示缩放信息</td><td><pre><kbd><span class='token boolean'>true</span></kbd></pre></td></tr><tr><td>enableGeolocation</td><td><span class='boolean-type'>Boolean</span></td><td>No</td><td>是否启用地理位置功能</td><td><pre><kbd><span class='token boolean'>true</span></kbd></pre></td></tr></tbody></table></div><div class='section'><h3>OverviewMapControlOptions <span>概述地图控制选项</span></h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>anchor</td><td><span class='enum-type'>ControlAnchor</span></td><td>No</td><td>在哪里放置OverviewMapControl</td><td><pre><kbd>ControlAnchor<span>.</span>BMAP_ANCHOR_TOP_LEFT</kbd></pre></td></tr><tr><td>offset</td><td><span class='object-type'>Size</span></td><td>No</td><td>OverviewMapControl的水平偏移量</td><td><pre><kbd><span>{</span> width<span>:</span> <span>100</span><span>,</span> height<span>:</span> <span>100</span><span>}</span></kbd></pre></td></tr><tr><td>size</td><td><span class='object-type'>Size</span></td><td>No</td><td>指定显示的OverviewMapControl的大小</td><td><pre><kbd><span>{</span> width<span>:</span> <span>100</span><span>,</span> height<span>:</span> <span>100</span> <span>}</span></kbd></pre></td></tr><tr><td>isOpen</td><td><span class='boolean-type'>Boolean</span></td><td>No</td><td>是否显示OverviewMapControl一次地图显示</td><td><pre><kbd><span class='token boolean'>true</span></kbd></pre></td></tr></tbody></table></div><div class='section'><h3>ScaleControlOptions <span>比例控制选项</span></h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>anchor</td><td><span class='enum-type'>ControlAnchor</span></td><td>No</td><td>放置ScaleControl的位置</td><td><pre><kbd>ControlAnchor<span>.</span>BMAP_ANCHOR_TOP_LEFT</kbd></pre></td></tr><tr><td>offset</td><td><span class='object-type'>Size</span></td><td>No</td><td>ScaleControl的水平偏移</td><td><pre><kbd><span>{</span> width<span>:</span> <span>100</span><span>,</span> height<span>:</span> <span>100</span><span>}</span></kbd></pre></td></tr></tbody></table></div><div class='section'><h3>PolylineOptions <span>线段控制选项</span></h3><table class='table table-bordered table-striped'><thead><tr><th>Param</th><th>Type</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>strokeColor</td><td><span class='enum-type'>String</span></td><td>No</td><td>折线颜色</td><td><pre><kbd>strokeColor:'red',</kbd></pre></td></tr><tr><td>strokeWeight</td><td><span class='object-type'>Number</span></td><td>No</td><td>折线的宽度，以像素为单位</td><td><pre><kbd>strokeWeight:5, </kbd></pre></td></tr><tr><td>strokeOpacity</td><td><span class='object-type'>Number</span></td><td>No</td><td>折线的透明度，取值范围0 - 1</td><td><pre><kbd>strokeOpacity:0.5</kbd></pre></td></tr><tr><td>strokeStyle</td><td><span class='object-type'>String</span></td><td>No</td><td>折线的样式，solid或dashed</td><td><pre><kbd>strokeStyle:“solid”</kbd></pre></td></tr></tbody></table></div></div>",
            "link": null
        },
        {
            "id":6,
            "title":"React Native",
            "subtitle":"this is about React Native...",
            "avatar":"./assets/img/react-native.jpg",
            "introduction": "<p class='text-center'>this is about React-Native introduction</p>",
            "text": "React Native",
            "link": null
        },
        {
            "id":7,
            "title":"Javascript ES6",
            "subtitle":"this is about ES6...",
            "avatar":"./assets/img/es2015.jpg",
            "introduction": "<p class='text-center'>this is about ES2015 introduction</p>",
            "text": "<h3 class='display-5'>-Symbol()</h3><p>翻译：符号</p><p>解释：Symbol值通过Symbol函数生成，凡是属性名属于Symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p><p>应用：</p><div class='card'><div class='card-block'>let s=Sympol();</br>typeof s;</br>&frasl;&frasl;“symbol”</div></div><h3 class='display-5'>-Set()</h3><p>解释：它类似于数组，但是成员的值都是唯一的，没有重复的值。</br>应用：</p><div class='card'><div class='card-block'>const s=<kbd>new Set()</kbd>;</br>[2,3,4,5,5,4,2,2].forEach(x=>s.add(x))</br>for(let i of s){</br>&nbsp;&nbsp;console.log(i);&nbsp;&nbsp;//2,3,4,5</br>}</br></div></div><h3 class='display-5'>-Map()</h3><p>解释：它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</br>应用：</p><div class='card'><div class='card-block'><pre>const map=<kbd>new Map()</kbd>;</br>map</br>&nbsp;.set(k1,'aaa')</br>&nbsp;.set(k2,'bbb');</br></br>map.get(k1);//'aaa'</br>map.get(k2);//'bbb'</pre></div></div><h3 class='display-5'>-Promise()</br></h3><p>解释：Promise对象是一个构造函数，用来生成Promise实例。</br>应用：</br></p><div class='card'><div class='card-block'><pre>let promise=new Promise(function(resolve,reject){</br>&nbsp;if(/**异步操作成功*/){</br>&nbsp;&nbsp;&nbsp;resolve(value);</br>&nbsp;}else{</br>&nbsp;&nbsp;&nbsp;reject(error);</br>&nbsp;}</br>})</br>promise.then(function(value){},function(error){})</br></pre></div></div><h3 class='display-5'>-class</h3><p>解释：通过class关键字，可以定义类</br>应用：</p><div class='card'><div class='card-block'><pre>class Point {}</br>等同于</br>class Point {</br>&nbsp;constructor(){}</br>}</br></br>class Point{</br>&nbsp;constructor(x,y){</br>&nbsp;&nbsp;&nbsp;&nbsp;this.x = x;</br>&nbsp;&nbsp;&nbsp;&nbsp;this.y = y;</br>&nbsp;}</br>&nbsp;toString(){</br>&nbsp;&nbsp;&nbsp;&nbsp;return '(' + this.x + ',' + this.y + ')'</br>&nbsp;&nbsp;}</br>}</br></br>var point = new Point(2,3);</br>point.toString();&nbsp;&nbsp;&nbsp;&nbsp;//(2,3)</pre></div></div><h3 class='display-5'>-for(let of){}</br></h3><p>对象：[...array]</br>解释：它就是for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。</br>应用：</br></p><div class='card'><div class='card-block'><pre>let num=[10,20,30];</br><kbd>for(let value of num)</kbd>{</br>&nbsp;console.log(value);</br>}</br>//10</br>//20</br>//30</br></pre></div></div>",
            "link": null
        },
        {
            "id":8,
            "title":"webpack & gulp",
            "subtitle":"this is about w_g...",
            "avatar":"./assets/img/g_w.jpg",
            "introduction": "<p class='text-center'>this is about w_g introduction</p>",
            "text": "w_g...",
            "link": null
        },
        {
            "id":9,
            "title":"mysql",
            "subtitle":"this is about mysql...",
            "avatar":"./assets/img/mysql.jpg",
            "introduction": "<p class='text-center'>this is about mysql introduction</p>",
            "text": "mysql...",
            "link": null
        },
        {
            "id":10,
            "title":"Test-E2E",
            "subtitle":"this is about E2E...",
            "avatar":"./assets/img/protractor.jpg",
            "introduction": "<p class='text-center'>this is about E2E introduction</p>",
            "text": "E2E...",
            "link": null
        },
        {
            "id":11,
            "title":"Javascript ES5",
            "subtitle":"this is about ES5...",
            "avatar":"./assets/img/javaScript1.jpg",
            "introduction": "<p class='text-center'>this is about ES5 introduction</p>",
            "text": "<p>参考源站：<a href='https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/A_first_splash'>MDN</a> web docs</p><h3 class='display-5'>-split()</br></h3><p>对象：string</br>解释：将字符串转换为数组。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var string='Lionel-blog';</br>var array=<kbd>string.split('-')</kbd>;</br>console.log(array);</br>//['Lionel', 'blog']</br></pre></div></div><h3 class='display-5'>-join()</br></h3><p>对象：string</br>解释：将数组转换为字符串。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var array=['a','b','c'];</br>var string=<kbd>array.join('-')</kbd>;</br>console.log(string);</br>//'a-b-c'</br></pre></div></div><h3 class='display-5'>-map()</br></h3><p>对象：[...array]</br>解释：遍历数组，作出处理，并返回一个新的数组。</br>区别：map()有return</br>应用：</br></p><div class='card'><div class='card-block'><pre>var array=['aaa','bbb','ccc'];</br>var newArray=array.<kbd>map(function(word){return word && '888'})</kbd>;</br>console.log(newArray);</br>//['888', '888', '888']</br></pre></div></div><h3 class='display-5'>-forEach()</br></h3><p>对象：[...array]</br>解释：遍历数组，同map()方法一样。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var array=['aaa','bbb','ccc'];</br>array.<kbd>forEach(function(word){console.log(word)})</kbd>;</br>//'aaa'</br>//'bbb'</br>//'ccc'</br></pre></div></div><h3 class='display-5'>-for(var in)</br></h3><p>对象：OObj</br>解释：遍历对象。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var obj={a:1,b:2,c:3};</br>for(prop in obj){</br>&nbsp;console.log('obj.'+prop+'='+obj.prop);</br>}</br>//'obj.a=1'</br>//'obj.b=2'</br>//'obj.c=3'</br></pre></div></div><h3 class='display-5'>-basically module</br></h3><div class='card'><div class='card-block'><dl><li>Element选择：document.<mark>querySelector</mark>(‘html’)</li><li>Element创建：document.<mark>createElement</mark>(‘button’)</li><li>Element添加：document.body.<mark>appendChild</mark>(Button)</li><li>Element移除：Button.parentNode.<mark>removeChild</mark>(Input)</li><li>Element赋值：document.querySelector(‘button’).<mark>textContent</mark>=‘Hello world’;</li><li>Element style: Button.style.backgroundColor=‘white’;</li><li>Variable类型: String,Number,Boolean,Array,Object,Undefined,Null</li><li>Event: document.querySelector(‘html’).onclick=function(){};</li><li>Event监听：Button.<mark>addEventListener</mark>(‘click’,function(){})</li><li>Prompt对话框: var myName=<mark>prompt</mark>(“Please enter your name.”);console.log(“your enter name:”+myName)</li><li>localStorage: 本地储存localStorage.setItem();localStorage.getItem();</li><li>sessionStorage: 对话储存</li></dl></div></div><h3 class='display-5'>-Math.floor()</br></h3><p>对象：number</br>解释：对一个数进行下舍入。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var numb=Math.floor(2.23);</br>//2</pre></div></div><h3 class='display-5'>-Math.random()</br></h3><p>对象：number</br>解释：返回介于0~1之间的一个随机数。</br>应用：</br></p><div class='card'><div class='card-block'><pre>Math.floor(Math.random()*100)+1;//返回【1，100】的整数</pre></div></div><h3 class='display-5'>-focus()</br></h3><p>对象：Elements</br>解释：添加焦点。</br>应用：</br></p><div class='card'><div class='card-block'><pre>document.querySelector(‘button’).focus();</pre></div></div><h3 class='display-5'>-javascript:void(0)</br></h3><p>解释：void指定要计算一个表达式但是不返回值。</br>应用：</br></p><div class='card'><div class='card-block'><pre><code>function(): void{}</br>&lt;a href='javascript:void(0)'&gt;单击此处什么也不会发生&lt;/a&gt;</code></pre></div></div><h3 class='display-5'>-indexOf()</br></h3><p>对象：string</br>解释：检索字符串。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var str='Hello world!'</br>document.write(str.indexOf('Hello')+'&lt;br /&gt;')</br>document.write(str.indexOf('World')+'&lt;br /&gt;')</br>document.write(str.indexOf('world'))</br>//0</br>//-1</br>//6</pre></div></div><h3 class='display-5'>-toLowerCase()</br></h3><p>对象：string</br>解释：小写。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var str='Hello world!'</br>str.toLowerCase();</pre></div></div><h3 class='display-5'>-toUpperCase()</br></h3><p>对象：string</br>解释：大写。</br>应用：</br></p><div class='card'><div class='card-block'><pre>var str='Hello world!'</br>str.toUpperCase();</pre></div></div>",
            "link": null
        }
    ]
}
